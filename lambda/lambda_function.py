import json
import boto3
from datetime import timedelta, date
import requests
import os
import logging

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# DiscordのWebhook URLを環境変数から取得
try:
    DISCORD_WEBHOOK_URL = os.environ['DISCORD_WEBHOOK_URL']
except KeyError:
    logger.error("環境変数DISCORD_WEBHOOK_URLが設定されていません")
    raise

# Webhookのカスタマイズ設定
WEBHOOK_AVATAR_URL = "https://icon.icepanel.io/AWS/svg/Cloud-Financial-Management/Cost-Explorer.svg"
WEBHOOK_USERNAME = "AWS Cost Notifier"


def get_cost(start_date, end_date):
    """
    指定された期間のAWS利用料金を取得する
    """
    try:
        # Cost ExplorerクライアントはUS East 1リージョンが必須
        client = boto3.client("ce", region_name="us-east-1")
        logger.info(f"{start_date}から{end_date}までのコストデータを取得中")
        
        response = client.get_cost_and_usage(
            TimePeriod={"Start": start_date, "End": end_date},
            Granularity="DAILY",
            Metrics=["UnblendedCost"],
        )
        
        # 複数日間の合計コストを計算
        total_cost = 0
        for result in response["ResultsByTime"]:
            amount = float(result["Total"]["UnblendedCost"]["Amount"])
            total_cost += amount
            logger.info(f"日付: {result['TimePeriod']['Start']}, コスト: ${amount:.2f}")
        
        logger.info(f"合計コスト: ${total_cost:.2f}")
        return total_cost
        
    except Exception as e:
        logger.error(f"コストデータ取得エラー: {str(e)}")
        raise


def post_to_discord(message, cost):
    """
    Discordにメッセージを投稿する
    """
    try:
        headers = {
            "Content-Type": "application/json",
        }

        embed = {
            "title": "AWS料金通知 💰",
            "description": message,
            "color": 0xFF9900,  # AWSオレンジ
            "thumbnail": {"url": WEBHOOK_AVATAR_URL},
            "fields": [
                {
                    "name": "💸 合計金額",
                    "value": f"${cost:.2f} USD",
                    "inline": True,
                },
                {
                    "name": "📅 期間",
                    "value": "過去7日間",
                    "inline": True,
                }
            ],
            "footer": {
                "text": "AWS Cost Explorer | Generated by Terraform ⚡",
                "icon_url": WEBHOOK_AVATAR_URL
            },
            "timestamp": date.today().isoformat()
        }

        payload = {
            "username": WEBHOOK_USERNAME,
            "avatar_url": WEBHOOK_AVATAR_URL,
            "embeds": [embed],
        }

        logger.info("Discord通知を送信中")
        response = requests.post(DISCORD_WEBHOOK_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        logger.info(f"Discord通知送信完了。ステータス: {response.status_code}")
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Discord通知送信エラー: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"予期しないエラーが発生しました: {str(e)}")
        raise


def lambda_handler(event, context):
    """
    Lambda関数のメインハンドラ
    """
    try:
        logger.info("AWS Cost Notifier Lambda関数を開始")
        
        # 実行日の日付を取得
        today = date.today()
        one_week_ago = today - timedelta(days=7)

        logger.info(f"コスト分析期間: {one_week_ago} から {today}")

        # 料金取得期間を設定（1週間前から実行日まで）
        start_date = one_week_ago.strftime("%Y-%m-%d")
        end_date = today.strftime("%Y-%m-%d")

        # Cost Explorerから料金を取得
        cost = get_cost(start_date, end_date)

        # Discordへの通知メッセージを作成
        message = f"**{one_week_ago.strftime('%Y年%m月%d日')}** から **{today.strftime('%Y年%m月%d日')}** までのAWS利用料金をお知らせします 📊"

        # Discordに通知
        post_to_discord(message, cost)

        logger.info("AWS Cost Notifier Lambda関数が正常に完了")
        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "Discord通知送信完了",
                "cost": cost,
                "period": f"{start_date} to {end_date}"
            })
        }

    except Exception as e:
        error_message = f"Lambda関数でエラーが発生: {str(e)}"
        logger.error(error_message)
        
        return {
            "statusCode": 500,
            "body": json.dumps({
                "error": error_message
            })
        }


# テスト実行用
if __name__ == "__main__":
    # テスト実行時のモックイベントとコンテキスト
    test_event = {}
    test_context = type('Context', (), {
        'function_name': 'aws-cost-notifier-test',
        'function_version': '$LATEST',
        'invoked_function_arn': 'arn:aws:lambda:us-east-1:123456789012:function:aws-cost-notifier-test',
        'memory_limit_in_mb': 256,
        'remaining_time_in_millis': lambda: 30000,
        'log_group_name': '/aws/lambda/aws-cost-notifier-test',
        'log_stream_name': '2024/01/01/[$LATEST]abcdefg1234567890',
        'aws_request_id': 'test-request-id'
    })()
    
    result = lambda_handler(test_event, test_context)
    print(json.dumps(result, indent=2))
